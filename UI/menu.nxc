/*
* menu.nxc
*
* A library to display a scrolling menu on the NXT screen.
*
* The library includes a menu rendering function and a menu loop 
* function. These functions can be used to generate a menu from 
* an array of items and a caption.
*
* See examples/menu_test.nxc for an example on how to use this library.
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License as
* published by the Free Software Foundation; either version 3 of
* the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software Foundation,
* Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

void DrawMenu(const string &caption, const string &items[], const byte &sel_item);
void TextOutRepeat(const int &x, const int &y, const string &text, const byte &count);
void MenuWait(const string &caption, const string &items[], byte &pos);

void MenuWait(const string &caption, const string &items[], byte &pos) {
  const int loop_delay = 800;    //waiting time before the loop starts
  const int max_rage = 100;      //The delay between menu entries
  int loop_rage = 0;             //If the button is pressed for some time, this var is used to accelerate the scrolling

  //Wait for the release of the center button (if pressed)
  while(ButtonState(BTNCENTER));
  while(1) {
    //Display the menu
    DrawMenu(caption, items, pos);
    //Wait until a button is pressed
    while(!ButtonState(BTNLEFT)&&!ButtonState(BTNRIGHT)&&!ButtonState(BTNCENTER));
    //Exit
    if(ButtonState(BTNCENTER)) {
      //To clear the screen before exiting the loop
        //RectOut(0,0,DISPLAY_WIDTH,DISPLAY_HEIGHT,DRAW_OPT_FILL_SHAPE|DRAW_OPT_INVERT);
      return;
    }
    else {
      if(ButtonState(BTNLEFT)) {
        //Go to the last menu entry when you are on the first one
        if(pos==0) {
          pos = ArrayLen(items)-1;
        }
        else {
          pos--;
        }
      }
      else {
        pos++;
      }
      if(pos>=ArrayLen(items))
        pos=0;
    }

    unsigned long time = CurrentTick()+loop_delay-loop_rage;
    while(ButtonState(BTNLEFT)||ButtonState(BTNRIGHT)) {
      if(CurrentTick()>time) {
        //Accelerate each time
        if(loop_delay-loop_rage>max_rage)
          loop_rage+=(loop_delay-loop_rage)/2;
        break;
      }
    }
    //Reset acceleration when button is released
    if(!ButtonState(BTNLEFT)&&!ButtonState(BTNRIGHT))
      loop_rage=0;
  }
}
void DrawMenu(const string &caption, const string &items[], const byte &sel_item) {
  //Create the title - >>>>TITLE<<<<
  byte chars = 0;
  if(strlen(caption)<16) {
    chars = ceil((16-strlen(caption))/2); //Number of symbols on the sides of the title
    TextOutRepeat(0, LCD_LINE1, ">", chars);
    TextOutRepeat((chars+strlen(caption))*6, LCD_LINE1, "<", chars);
  }
  //Display the title
  TextOut(6*chars, LCD_LINE1, caption);
  //Check the number of menu entries
  byte len = ArrayLen(items);
  //Check if all the entries can be displayed on the screen
  byte offset = 0;
  if(len>7&&sel_item>4) {  //The screen can display up to 7 entries
    offset=sel_item-4;     //After the 4th entry the menu starts scrolling
    if(offset+7>len)       //Doesn't scroll unless there are other items to display
      offset=len-7;
  }
  for(byte i=offset; i<7+offset&&i<len; i++) {
    int line_top=DISPLAY_HEIGHT-(i-offset)*8-16; //Display is numbered from bottom to top (0 = first from the bottom)
    TextOut(0,                    //X position: totally left
            line_top,
            items[i],             //The text of the menu entry
            i==sel_item?DRAW_OPT_INVERT:0  //If the item is equal to the current selected, the text is inverted (white)
     );
     /*The dark area for the current entry selector*/
     RectOut(strlen(items[i])*6,line_top,DISPLAY_WIDTH,7, DRAW_OPT_FILL_SHAPE|(i==sel_item?0:DRAW_OPT_INVERT));  //selector height: 7

  }

}
//Repeat a string n-times (count)
void TextOutRepeat(const int &x, const int &y, const string &text, const byte &count) {
  for(byte i=0; i<count; i++)
    TextOut(x+i*6, y, text);
}
